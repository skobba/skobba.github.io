---
import { getCollection } from "astro:content";
import '../styles/docs-menu.css';
import { ListFormat } from "typescript";

/*
Creates a html structure based on folder structure:

<ul class="menu">
    <li class="level1 file"><a href="/docs/a">Item 1</a></li>
    <li class="level1 folder"><a href="/docs/b">Item 2</a>
      <ul>
        <li class="level2 file"><a href="/docs/c">Subitem 2.1</a></li>
        <li class="level2 folder"><a href="/docs/root">root 2.2</a>
          <ul>
            <li class="level3 file"><a href="/docs/e">Subitem 2.2.1</a></li>
            <li class="level3 file"><a href="/docs/f">Subitem 2.2.2</a></li>
          </ul>
        </li>
      </ul>
    </li>
    <li class="level1 file"><a href="/docs/api/api">Item 3</a></li>
</ul>
*/

// Fetch collection
const docs = await getCollection("docs");

const orderLevel1 = [
    "kubernetes",
    "web",
    "git"
]

const titleList = {
  "kubernetes": "Kubernetes",
  "kubernetes/components": "Components",
  "kubernetes/patterns": "Patterns",
  "kubernetes/deployments": "Deployments",
  "kubernetes/ingress": "Ingress",
  "kubernetes/loadbalancer": "Load Balancer",
  "kubernetes/storage": "Storage",
  "kubernetes/tools": "Tools",
  "web": "Web",
  "web/ssr": "SSR",
  "terminal": "Terminal"
};


function getTitle(path) {
  return titleList[path] || "Unknown Title";
}

const sortLinks = (linkList) =>{

    return linkList.sort((a, b) => {
      // Extract the top-level categories
      const aTopLevel = a.split('/')[0];
      const bTopLevel = b.split('/')[0];
    
      // Compare based on orderLevel1
      const aIndex = orderLevel1.indexOf(aTopLevel);
      const bIndex = orderLevel1.indexOf(bTopLevel);
    
      if (aIndex !== bIndex) {
        return aIndex - bIndex;
      }
    
      // If top-level categories are the same, sort alphabetically
      return a.localeCompare(b);
    });

}

// Generate links for each Markdown document
const docLinks = docs.map((doc) => {
    const { slug, data } = doc;
  // Extract the slug (path without the `.md` extension)
  return `${slug}`;
});

// Function to generate nested UL/LI structure
function generateMenu(links) {

    const menu = {};

    // Helper function to recursively sort the menu
    function sortMenu(obj) {
        // Sort keys, prioritizing folders (objects) over files (strings) and sorting alphabetically
        const sortedKeys = Object.keys(obj).sort((a, b) => {
            const isFolderA = typeof obj[a] === 'object' && obj[a] !== null;
            const isFolderB = typeof obj[b] === 'object' && obj[b] !== null;

            if (isFolderA && !isFolderB) return -1; // Folder before file
            if (!isFolderA && isFolderB) return 1;  // File after folder
            return a.localeCompare(b);              // Otherwise sort alphabetically
        });

        // Reconstruct the object with sorted keys
        const sortedObj = {};
        sortedKeys.forEach(key => {
            sortedObj[key] = typeof obj[key] === 'object' && obj[key] !== null ? sortMenu(obj[key]) : obj[key];
        });

        return sortedObj;
    }

    // Build the nested object structure
    links.forEach(link => {

        // Remove readme files from folders
        // They are used in the folder links
        if (link.includes('readme')) {
            return;
        }
        //console.log('link: ', link)
        const parts = link.split('/').filter(Boolean);
        let current = menu;

        parts.forEach((part, index) => {
            if (!current[part]) {
                current[part] = index === parts.length - 1 ? link : {};
            }
            current = current[part];
        });
    });

    // Function to convert the object to HTML
    function buildList(items, level = 1, path = "") 
    {

        let ul = '<ul>';
        for (let key in items) {
            // Lookup title
            const pathTrimmed = path.replace(/^\//, "");
            const fullPath = path === "" ? key : pathTrimmed + "/" + key;
            const title = titleList[fullPath] || key;
            
            // It´s a file
            if (typeof items[key] === 'string') {
                ul += `<li class="level${level} file"><a href="/docs/${items[key]}">${title}</a></li>`;
            } 
            // It´s a folder
            else {

                ul += `<li class="level${level} folder"><a href="/docs${path}/${key}/readme">${title}</a>${buildList(items[key], level + 1, path + "/" + key)}</li>`;
            }
        }
        ul += '</ul>';
        return ul;
    }


    const sortedMenu = sortMenu(menu);

    return buildList(sortedMenu);
}

// Generate the HTML for the menu
const menuHtml = generateMenu(docLinks);

---

<style>
    ul {
        list-style-type: none;
    }
    .menu {
        list-style-type: none;

        padding-left: 0px;
    }
</style>
<!-- Render the generated menu directly -->
<!-- <div class="menu" id="menu" set:html={menuHtml}/> -->


<div>
    <!-- <ul id="menu" set:html={menuHtml}></ul> -->
    <!-- <div class="menu">
        <ul class="menu" id="menu" set:html={menuHtml}></ul>
    </div> -->

    <div class="menu" id="menu" set:html={menuHtml}/>


</div>

<script>
    import "../scripts/docs-menu.js";
 </script>

<!-- <div class="menu">
    <ul class="menu" id="menu" set:html={menuHtml}></ul>
</div> -->